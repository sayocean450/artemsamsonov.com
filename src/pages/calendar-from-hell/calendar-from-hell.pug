include ../../components/head/head
include ../../components/header/header
include ../../components/article-headline/article-headline
include ../../components/article-breadcrumb/article-breadcrumb

doctype html
html
    +head(
      'Артём Самсонов • Продуктовый дизайнер',
      'Почему дизайнерам компонентов нужно доплачивать за вредность',
      'http://artemsamsonov.com/img/default.jpg',
      'article'
    )
body.body_light
    +header()
    div.content
        div.article
            h1 Почему дизайнерам компонентов нужно доплачивать за вредность
            p.article__text-annotation Рассказываю на примере компонента «Календарь», как типичная на первый взгляд задача способна довести продуктового дизайнера до слёз.
            div.article__list
                h4 Содержание статьи
                a(href="#intro") Предисловие
                a(href="#step1") Этап 1. Делим дни по типам
                a(href="#step2") Этап 2. Добавляем точку отсчёта
                a(href="#step3") Этап 3. Проектируем взаимодействия
                a(href="#step4") Этап 4. Презентуем разработчикам. Обтекаем
                a(href="#step5") Этап 5. Испытываем компонент
                a(href="#step6")#intro Вы ещё живы?
            h2 Предисловие
            p Настало время рассказать, почему я считаю дизайн компонентов одной из самых сложных задач в продуктовом дизайне.
            p В качестве примера мы возьмём календарь компании Wrike, где я отвечал за дизайн-систему. С помощью этого календаря пользователи Wrike отмечали время, которое они потратили на те или иные задачи. Однако, его могли использовать и в других частях продукта для самых разнообразных целей.
            p Конечно, первым делом мы должны собрать требования с заинтересованных в компоненте команд и узнать потребности пользователей. Но сегодня я не хочу углубляться в подготовительный этап. Давайте сфокусируемся именно на проектировании.
            p Начнём с максимально примитивной заготовки. Вот она:
            p.article__image#step1
                a(href="../../img/calendar-01.jpg" target="_blank")
                    img(src="../../img/calendar-01.jpg")
            h2 Этап 1. Делим дни по типам
            p Сразу же учтём простой нюанс. Не все знают, что в США и Великобритании неделя начинается с воскресенья. Нужно обязательно показать это в макете и указать в спецификации для разработчиков:
            p.article__image
                a(href="../../img/calendar-02.jpg" target="_blank")
                    img(src="../../img/calendar-02.jpg")
                span.article__image-caption Слева — календарь для России, справа — вариант для США в Великобритании
            p Давайте возьмём привычный нам календарь, где неделя начинается с понедельника. Первым делом отделим выходные дни от рабочих традиционным красным цветом:
            p.article__image
                a(href="../../img/calendar-03.jpg" target="_blank")
                    img(src="../../img/calendar-03.jpg")
            p Наши пользователи просили добавить ещё и
                strike нерабочие
                =" "
                | занятые дни. Чаще всего это дни, когда сотрудник уехал в командировку, выступает на конференции или гуляет на корпоративе. Формально человек потратил время на рабочие обязанности, но для команды его ресурсы были недоступны.
            p Что ж, превращаем последнюю пятницу месяца (25 марта) в занятый день — корпоратив:
            p.article__image
                a(href="../../img/calendar-04.jpg" target="_blank")
                    img(src="../../img/calendar-04.jpg")
                span.article__image-caption Рабочие дени чёрные, выходные — красные, а занятый день помечен алым пунктиром
            p#step2 С типами дней закончили. Двигаемся дальше.
            h2 Этап 2. Добавляем точку отсчёта
            p Для большинства людей время линейно. Значит, в нашем календаре существует три отрезка: прошлое, сегодняшний день, будущее.
            p Давайте добавим на календарь точку отсчёта. Обведём сегодняшний день, чтобы юзер не прилагал лишние когнитивные усилия каждый раз, когда открывает компонент:
            p.article__image
                a(href="../../img/calendar-05.jpg" target="_blank")
                    img(src="../../img/calendar-05.jpg")
                span.article__image-caption Судя по календарю, сегодня 11 марта. Мы сомневались в этом визуальном решении, по пользователи быстро к нему привыкли
            p В некоторых случаях нам придётся блокировать прошедшие дни — например, когда пользователь выбирает дату для zoom-митинга. Мы ведь не можем назначить митинг на вчера, верно?
            p.article__image
                a(href="../../img/calendar-06.jpg" target="_blank")
                    img(src="../../img/calendar-06.jpg")
                span.article__image-caption Прошедшие дни недоступны для выбора
            p Итак, мы разделили дни по двум признакам. Дни могут быть рабочими, выходными и занятыми. Также они бывают прошедшими, настоящими и будущими.
            p#step3 Теперь давайте подумаем, как пользователи будут взаимодействовать с компонентом.
            h2 Этап 3. Проектируем взаимодействия
            h4 Наводим на даты
            p Как поведёт себя ячейка календаря, если мы наведём курсор на сегодняший день? А на будущий? Создаём общий стиль для обоих случаев:
            p.article__image
                a(href="../../img/calendar-07.jpg" target="_blank")
                    img(src="../../img/calendar-07.jpg")
                span.article__image-caption Слева hover-состояние для сегодняшнего дня, справа — для будущего
            p Пользователь может навести курсор и на недоступные дни. Тогда лучше не молчать, а объяснить ему, почему он не сможет выбрать данную дату:
            p.article__image
                a(href="../../img/calendar-08.jpg" target="_blank")
                    img(src="../../img/calendar-08.jpg")
            h4 Выбор дат
            p А как пользователь будет выбирать нужный ему день? Это достаточно просто:
            p.article__image
                a(href="../../img/calendar-09.jpg" target="_blank")
                    img(src="../../img/calendar-09.jpg")
                span.article__image-caption Пользователь выбрал 15 марта
            p Часто пользователям нужно выбрать не конкретный день, а период. Например, отпуск или срок выполнения задачи:
            p.article__image
                a(href="../../img/calendar-10.jpg" target="_blank")
                    img(src="../../img/calendar-10.jpg")
                span.article__image-caption Пользователь собирается делать задачу 4 дня
            p Большие задачи длятся неделями, проекты — месяцами. В таком случае в периоды неизбежно попадают выходные и занятые дни. Их нужно подсвечивать внутри периода. Вот пример, в который попали не только субботы и воскресенья, но и наш пятничный корпоратив:
            p.article__image
                a(href="../../img/calendar-12.jpg" target="_blank")
                    img(src="../../img/calendar-12.jpg")
                span.article__image-caption Из шестнадцати выделенных дней пользователь сможет посвятить задаче только одиннадцать
            p В выбранный период может так же попасть сегодняшний день (11 марта). Для него тоже придётся использовать отдельный стиль:
            p.article__image
                a(href="../../img/calendar-13.jpg" target="_blank")
                    img(src="../../img/calendar-13.jpg")
            p Думаете, это всё? Как бы не так! Пользователь может выделить период, а затем наводить на выделенные дни мышкой. Например, чтобы понять, почему некоторые из них «подсвечены белыми кружочками».
            p И нам обязательно нужно это объяснить:
            p.article__image#step4
                a(href="../../img/calendar-14.jpg" target="_blank")
                    img(src="../../img/calendar-14.jpg")
            h2 Этап 4. Презентуем разработчикам. Обтекаем
            p Как только вы решите, что ваш компонент готов для разработки, отнесите его на PBR и покажите команде. На этой замечательной встрече ваш концепт развалят своими едкими вопросами разработчики (за что вы начнёте их любить и ненавидеть одновременно).
            p Вот пара вопросов, которые нанесут серьёзный урон вашей репутации продумана.
            h4 А что если сегодняшний день — выходной?
            p Действительно, мы забыли добавить ещё один стиль для таких случаев:
            p.article__image
                a(href="../../img/calendar-16.jpg" target="_blank")
                    img(src="../../img/calendar-16.jpg")
                span.article__image-caption Сегодня суббота, 12 марта. Пожалуйста, отдохните
            p Не успели мы ответить на первый вопрос, как руку тянет Principal Java Developer:
            h4 «А что если пользователя попросили поработать в выходные? Как ему затрекать время?»
            p#step5 Чтобы окончательно не расплавиться, мы передадим эту проблему команде раздела Timetracking. Они разработают для таких случаев персональные производственные календари. Излишне усложнять компонент тоже не стоит.
            h2 Этап 5. Испытываем компонент
            p Отмучавшись два-три PBR-а и поправив все неучтённые кейсы, пора примерять наш компонент на самые разные ситуации. Зачем? Всё просто: компонент должен быть универсальным и обладать запасом гибкости.
            p Например, представьте, что ваш календарь будут использовать координаторы для покупки авиабилетов сотрудникам. В первом календаре координатор указывает дату вылета. В втором — дату возвращения. Вернуться раньше, чем улететь человек не может. Значит, наш календарь теоретически должен уметь передавать данные вовне:
            p.article__image
                a(href="../../img/flights-example.gif" target="_blank")
                    img(src="../../img/flights-example.gif")
            p А вот пример для бронирования корпоративной квартиры. Прошлые дни недоступны. Ближайшие 10 дней заняты. Заселиться можно только с 21 марта:
            p.article__image#step6
                a(href="../../img/calendar-23.jpg" target="_blank")
                    img(src="../../img/calendar-23.jpg")
                span.article__image-caption Теоретически можно объединить недоступные дни в колбаску-период, но лучше добавлять функции только когда они реально потребуются
            h2 Вы ещё живы?
            p Зря. Потому что мы не проработали и половины нюансов. Дизайнеру компонентов предстоит продумать как минимум:
            ul
                li
                    span Выделение периодов длиной несколько месяцев (например, 1.01 – 1.05)
                li
                    span Цветовой контраст элементов для пользователей с нарушениями зрения (не все различают цвета корректно)
                li
                    span Клавиатурную навигацию для людей с ограниченными возможностями (не все могут кликать мышкой)
                li
                    span Позиционирование календаря (куда ему выпадать, если снизу не хватает места?)
                li
                    span Отображение календаря на экранах мобильных
                li
                    span Выделение дат пальцем, а не курсором
            p Если я начну расписывать каждый из этих пунктов, мы закончим к утру.
            p Так что, ребята, берегите продуктовых дизайнеров. Они седеют ради вашего удобства.